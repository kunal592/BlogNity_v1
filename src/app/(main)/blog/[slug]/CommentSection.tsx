\'use client\';\n\nimport { useState } from \'react\';\nimport { Button } from \'@/components/ui/button\';\nimport { Textarea } from \'@/components/ui/textarea\';\nimport { Avatar, AvatarFallback, AvatarImage } from \'@/components/ui/avatar\';\nimport { formatDistanceToNow } from \'date-fns\';\nimport { Loader2 } from \'lucide-react\';\nimport { useSession } from \'next-auth/react\';\nimport { useRouter } from \'next/navigation\';\nimport { Comment } from \'@/lib/types\';\n\ninterface CommentSectionProps {\n  postId: string;\n  comments: Comment[];\n  onCommentAdded: () => void;\n}\n\nexport default function CommentSection({ postId, comments, onCommentAdded }: CommentSectionProps) {\n  const { data: session } = useSession();\n  const router = useRouter();\n  const [commentText, setCommentText] = useState(\'\');\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  const handleCommentSubmit = async () => {\n    if (!session) {\n      router.push(\'/signin\');\n      return;\n    }\n    if (!commentText.trim()) return;\n\n    setIsSubmitting(true);\n    try {\n      const res = await fetch(\`/api/posts/comment\`, {\n        method: \'POST\',\n        headers: {\n            \'Content-Type\': \'application/json\',\n        },\n        body: JSON.stringify({ postId, content: commentText }),\n      });\n      if(res.ok) {\n        setCommentText(\'\');\n        onCommentAdded();\n      }\n    } catch (error) {\n        console.error(\"Failed to post comment\", error);\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  return (\n    <div className=\"space-y-8\">\n      <h2 className=\"text-2xl font-bold\">Comments ({comments?.length || 0})</h2>\n      \n      {session && (\n        <div className=\"flex gap-4\">\n          <Avatar>\n            <AvatarImage src={session.user.image || \'\'} alt={session.user.name || \'\'} />\n            <AvatarFallback>{session.user.name?.charAt(0)}</AvatarFallback>\n          </Avatar>\n          <div className=\"flex-1\">\n            <Textarea \n                placeholder=\"Write a comment...\"\n                value={commentText}\n                onChange={(e) => setCommentText(e.target.value)}\n                rows={3}\n            />\n            <Button onClick={handleCommentSubmit} disabled={isSubmitting} className=\"mt-2\">\n                {isSubmitting && <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />}\n                Post Comment\n            </Button>\n          </div>\n        </div>\n      )}\n\n      <div className=\"space-y-6\">\n        {comments?.map(comment => (\n          <div key={comment.id} className=\"flex gap-4\">\n            <Avatar>\n                <AvatarImage src={comment.author.image || \'\'} alt={comment.author.name || \'\'} />\n                <AvatarFallback>{comment.author.name?.charAt(0)}</AvatarFallback>\n            </Avatar>\n            <div>\n              <div className=\"flex items-center gap-2\">\n                  <p className=\"font-semibold\">{comment.author.name}</p>\n                  <p className=\"text-xs text-muted-foreground\">\n                    {formatDistanceToNow(new Date(comment.createdAt), { addSuffix: true })}\n                  </p>\n              </div>\n              <p>{comment.content}</p>\n            </div>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n